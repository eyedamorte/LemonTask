{"ast":null,"code":"import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (isLogin, username) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    isLogin: isLogin,\n    username: username\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const logout = () => {\n  localStorage.removeItem('isLogin');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeout = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nconst dataforauth = {\n  'username': 'Admin',\n  'password': '12345'\n};\nexport const authLogin = (username, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    console.log(username, password);\n    const authdata = {\n      'username': username,\n      'password': password\n    };\n\n    if (authdata['username'] === dataforauth['username'] && authdata['password'] === dataforauth['password']) {\n      console.log('access');\n      const isLogin = true;\n      const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n      localStorage.setItem('isLogin', isLogin);\n      localStorage.setItem('isLogin', isLogin);\n      localStorage.setItem('expirationDate', expirationDate);\n      console.log(dataforauth);\n      dispatch(authSuccess(isLogin, username));\n      dispatch(checkAuthTimeout(3600));\n    } else {\n      dispatch(authFail('Неправильный пароль'));\n    }\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const isLogin = localStorage.getItem('isLogin');\n\n    if (isLogin === undefined) {\n      dispatch(logout());\n    } else {\n      const expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(authSuccess(isLogin));\n        dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/eyedamorte/Desktop/filemanager/frontend/src/store/actions/auth.js"],"names":["axios","actionTypes","authStart","type","AUTH_START","authSuccess","isLogin","username","AUTH_SUCCESS","authFail","error","AUTH_FAIL","logout","localStorage","removeItem","AUTH_LOGOUT","checkAuthTimeout","expirationTime","dispatch","setTimeout","dataforauth","authLogin","password","console","log","authdata","expirationDate","Date","getTime","setItem","authCheckState","getItem","undefined"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAD,EAAUC,QAAV,KAAuB;AAC9C,SAAO;AACHJ,IAAAA,IAAI,EAAEF,WAAW,CAACO,YADf;AAEHF,IAAAA,OAAO,EAAEA,OAFN;AAGHC,IAAAA,QAAQ,EAAEA;AAHP,GAAP;AAKH,CANM;AAQP,OAAO,MAAME,QAAQ,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHP,IAAAA,IAAI,EAAEF,WAAW,CAACU,SADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,MAAM,GAAG,MAAM;AACxBC,EAAAA,YAAY,CAACC,UAAb,CAAwB,SAAxB;AACAD,EAAAA,YAAY,CAACC,UAAb,CAAwB,gBAAxB;AACA,SAAO;AACHX,IAAAA,IAAI,EAAEF,WAAW,CAACc;AADf,GAAP;AAGH,CANM;AAQP,OAAO,MAAMC,gBAAgB,GAAGC,cAAc,IAAI;AAC9C,SAAOC,QAAQ,IAAI;AACfC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACH,KAFS,EAEPK,cAAc,GAAG,IAFV,CAAV;AAGH,GAJD;AAKH,CANM;AAOP,MAAMG,WAAW,GAAG;AAAC,cAAY,OAAb;AACC,cAAY;AADb,CAApB;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACd,QAAD,EAAWe,QAAX,KAAwB;AAC7C,SAAOJ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAChB,SAAS,EAAV,CAAR;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ,EAAsBe,QAAtB;AACA,UAAMG,QAAQ,GAAG;AAAC,kBAAYlB,QAAb;AACC,kBAAYe;AADb,KAAjB;;AAEA,QAAIG,QAAQ,CAAC,UAAD,CAAR,KAAyBL,WAAW,CAAC,UAAD,CAArC,IAAqDK,QAAQ,CAAC,UAAD,CAAR,KAAyBL,WAAW,CAAC,UAAD,CAA5F,EAA0G;AACxGG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,YAAMlB,OAAO,GAAG,IAAhB;AACA,YAAMoB,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuB,OAAO,IAAvC,CAAvB;AACAf,MAAAA,YAAY,CAACgB,OAAb,CAAqB,SAArB,EAAgCvB,OAAhC;AACAO,MAAAA,YAAY,CAACgB,OAAb,CAAqB,SAArB,EAAgCvB,OAAhC;AACAO,MAAAA,YAAY,CAACgB,OAAb,CAAqB,gBAArB,EAAuCH,cAAvC;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;AACAF,MAAAA,QAAQ,CAACb,WAAW,CAACC,OAAD,EAAUC,QAAV,CAAZ,CAAR;AACAW,MAAAA,QAAQ,CAACF,gBAAgB,CAAC,IAAD,CAAjB,CAAR;AACD,KAVD,MAUK;AACHE,MAAAA,QAAQ,CAACT,QAAQ,CAAC,qBAAD,CAAT,CAAR;AACD;AAIJ,GArBD;AAsBH,CAvBM;AA0BP,OAAO,MAAMqB,cAAc,GAAG,MAAM;AAChC,SAAOZ,QAAQ,IAAI;AACf,UAAMZ,OAAO,GAAGO,YAAY,CAACkB,OAAb,CAAqB,SAArB,CAAhB;;AACA,QAAIzB,OAAO,KAAK0B,SAAhB,EAA2B;AACvBd,MAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACH,KAFD,MAEO;AACH,YAAMc,cAAc,GAAG,IAAIC,IAAJ,CAASd,YAAY,CAACkB,OAAb,CAAqB,gBAArB,CAAT,CAAvB;;AACA,UAAKL,cAAc,IAAI,IAAIC,IAAJ,EAAvB,EAAoC;AAChCT,QAAAA,QAAQ,CAACN,MAAM,EAAP,CAAR;AACH,OAFD,MAEO;AACHM,QAAAA,QAAQ,CAACb,WAAW,CAACC,OAAD,CAAZ,CAAR;AACAY,QAAAA,QAAQ,CAACF,gBAAgB,CAAE,CAACU,cAAc,CAACE,OAAf,KAA2B,IAAID,IAAJ,GAAWC,OAAX,EAA5B,IAAoD,IAAtD,CAAjB,CAAR;AACH;AACJ;AACJ,GAbD;AAcH,CAfM","sourcesContent":["import axios from 'axios';\nimport * as actionTypes from './actionTypes';\n\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (isLogin, username) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        isLogin: isLogin,\n        username: username\n    }\n}\n\nexport const authFail = error => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const logout = () => {\n    localStorage.removeItem('isLogin');\n    localStorage.removeItem('expirationDate');\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\nexport const checkAuthTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000)\n    }\n}\nconst dataforauth = {'username': 'Admin',\n                     'password': '12345'};\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        console.log(username, password);\n        const authdata = {'username': username,\n                          'password': password};\n        if((authdata['username'] === dataforauth['username'])&&(authdata['password'] === dataforauth['password'])){\n          console.log('access');\n          const isLogin = true;\n          const expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n          localStorage.setItem('isLogin', isLogin);\n          localStorage.setItem('isLogin', isLogin);\n          localStorage.setItem('expirationDate', expirationDate);\n          console.log(dataforauth);\n          dispatch(authSuccess(isLogin, username));\n          dispatch(checkAuthTimeout(3600));\n        }else{\n          dispatch(authFail('Неправильный пароль'));\n        }\n\n\n\n    }\n}\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const isLogin = localStorage.getItem('isLogin');\n        if (isLogin === undefined) {\n            dispatch(logout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if ( expirationDate <= new Date() ) {\n                dispatch(logout());\n            } else {\n                dispatch(authSuccess(isLogin));\n                dispatch(checkAuthTimeout( (expirationDate.getTime() - new Date().getTime()) / 1000) );\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}